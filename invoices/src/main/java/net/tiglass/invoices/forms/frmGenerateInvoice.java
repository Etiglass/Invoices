/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.tiglass.invoices.forms;

import java.io.*;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import javax.swing.JOptionPane;

import mx.bigdata.sat.cfdi.CFDv32;
import net.tiglass.invoices.CFDv32Factory;
import mx.bigdata.sat.cfdi.v32.schema.Comprobante;
import mx.bigdata.sat.security.KeyLoaderEnumeration;
import mx.bigdata.sat.security.factory.KeyLoaderFactory;
import net.tiglass.invoices.connection.AlfakDBConnection;
import net.tiglass.invoices.data.AlfakOrder;
import net.tiglass.invoices.properties.AppProperties;
import net.tiglass.invoices.wsclient.ServiceClient;

/**
 *
 * @author TIGLASS 2
 */
public class frmGenerateInvoice extends javax.swing.JFrame {

    private static AlfakDBConnection connection = new AlfakDBConnection();
    private static AppProperties properties = new AppProperties();
    private int orderId;

    public static void setProperties(AppProperties properties) {
        frmGenerateInvoice.properties = properties;
    }

    public frmGenerateInvoice() {
        initComponents();
        //JOptionPane.showMessageDialog(rootPane, "Algo");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabGenerateInvoice = new javax.swing.JTabbedPane();
        pnlGeneral = new javax.swing.JPanel();
        txtPedido = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        txtFormaPago = new javax.swing.JTextField();
        txtMetodoPago = new javax.swing.JTextField();
        txtRfcEmisor = new javax.swing.JTextField();
        txtRegimenFiscalEmisor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDomicilioEmisor = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtRfcReceptor = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtNombreEmisor = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtNombreReceptor = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDomicilioReceptor = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        txtSubtotal = new javax.swing.JTextField();
        txtImpuesto = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        btnGenerar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Factura Electrónica");
        setResizable(false);

        txtPedido.setEnabled(false);

        jLabel1.setLabelFor(txtPedido);
        jLabel1.setText("Pedido:");

        jLabel2.setLabelFor(txtFecha);
        jLabel2.setText("Fecha:");

        jLabel3.setLabelFor(txtFormaPago);
        jLabel3.setText("Forma de pago:");

        jLabel4.setLabelFor(txtFecha);
        jLabel4.setText("Método de pago:");

        jLabel5.setText("Emisor");

        jLabel6.setLabelFor(txtRfcEmisor);
        jLabel6.setText("RFC:");

        jLabel7.setLabelFor(txtRegimenFiscalEmisor);
        jLabel7.setText("Régimen fiscal:");

        txtFecha.setEnabled(false);

        txtFormaPago.setEnabled(false);

        txtMetodoPago.setEnabled(false);

        txtRfcEmisor.setEnabled(false);
        txtRfcEmisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRfcEmisorActionPerformed(evt);
            }
        });

        txtRegimenFiscalEmisor.setEnabled(false);

        jLabel8.setLabelFor(txtDomicilioEmisor);
        jLabel8.setText("Domicilio:");

        txtDomicilioEmisor.setEnabled(false);

        jLabel9.setText("Receptor");

        jLabel10.setLabelFor(txtRfcReceptor);
        jLabel10.setText("RFC:");

        txtRfcReceptor.setEnabled(false);
        txtRfcReceptor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRfcReceptorActionPerformed(evt);
            }
        });

        jLabel11.setLabelFor(txtNombreEmisor);
        jLabel11.setText("Nombre:");

        txtNombreEmisor.setEnabled(false);
        txtNombreEmisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreEmisorActionPerformed(evt);
            }
        });

        jLabel12.setLabelFor(txtNombreReceptor);
        jLabel12.setText("Nombre:");

        txtNombreReceptor.setEnabled(false);

        jLabel13.setLabelFor(txtDomicilioReceptor);
        jLabel13.setText("Domicilio:");

        txtDomicilioReceptor.setEnabled(false);

        txtSubtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSubtotal.setEnabled(false);

        txtImpuesto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtImpuesto.setEnabled(false);

        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setEnabled(false);

        jLabel14.setLabelFor(txtSubtotal);
        jLabel14.setText("Subtotal:");

        jLabel15.setLabelFor(txtImpuesto);
        jLabel15.setText("Impuesto:");

        jLabel16.setLabelFor(txtTotal);
        jLabel16.setText("Total:");

        javax.swing.GroupLayout pnlGeneralLayout = new javax.swing.GroupLayout(pnlGeneral);
        pnlGeneral.setLayout(pnlGeneralLayout);
        pnlGeneralLayout.setHorizontalGroup(
            pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralLayout.createSequentialGroup()
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGeneralLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel11)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)))
                    .addGroup(pnlGeneralLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)))
                    .addGroup(pnlGeneralLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel14))
                    .addGroup(pnlGeneralLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15))
                    .addGroup(pnlGeneralLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGeneralLayout.createSequentialGroup()
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMetodoPago, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                            .addComponent(txtFecha)))
                    .addComponent(txtDomicilioEmisor)
                    .addComponent(txtDomicilioReceptor)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlGeneralLayout.createSequentialGroup()
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlGeneralLayout.createSequentialGroup()
                                .addComponent(txtNombreReceptor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10))
                            .addGroup(pnlGeneralLayout.createSequentialGroup()
                                .addComponent(txtNombreEmisor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRfcEmisor, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(txtRfcReceptor)))
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtRegimenFiscalEmisor)
                    .addGroup(pnlGeneralLayout.createSequentialGroup()
                        .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtImpuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator3))
                .addContainerGap())
        );
        pnlGeneralLayout.setVerticalGroup(
            pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPedido, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtNombreEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtRfcEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDomicilioEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRegimenFiscalEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtNombreReceptor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtRfcReceptor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtDomicilioReceptor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImpuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        tabGenerateInvoice.addTab("General", pnlGeneral);

        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabGenerateInvoice)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGenerar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabGenerateInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGenerar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setOrderId(int OrderId) {
        try {
            orderId = OrderId;
            AlfakOrder order = new AlfakOrder();
            ResultSet rs = order.getOrderHeader(orderId);
            String sAtribReq = "";

            if (rs.next()) {
                txtPedido.setText(String.valueOf(orderId));

                txtFecha.setText(rs.getString("FECHA_FACTURA"));

                String formaDePago = rs.getString("FORMA_PAGO");
                if (formaDePago.length() > 0) {
                    txtFormaPago.setText(rs.getString("FORMA_PAGO"));
                } else {
                    sAtribReq += "formaDePago|";
                }

                String metodoDePago = rs.getString("METODO_PAGO");
                if (metodoDePago.length() > 0) {
                    txtMetodoPago.setText(metodoDePago);
                } else {
                    sAtribReq += "metodoDePago|";
                }

                String nombreEmisor = rs.getString("E_NOMBRE");
                if (nombreEmisor.length() > 0) {
                    txtNombreEmisor.setText(nombreEmisor);
                }

                String rfcEmisor = rs.getString("E_RFC");
                if (rfcEmisor.length() > 0) {
                    txtRfcEmisor.setText(rfcEmisor);
                } else {
                    sAtribReq += "rfcEmisor|";
                }

                String domicilioEmisor = "";
                String calleE = rs.getString("E_CALLE");
                if (calleE.length() > 0) {
                    domicilioEmisor += calleE;
                } else {
                    sAtribReq += "calleEmisor|";
                }

                String noExteriorE = rs.getString("E_NUMERO_EXTERIOR");
                if (noExteriorE.length() > 0) {
                    domicilioEmisor += ", " + noExteriorE;
                }

                //uf.setNoInterior(rs.getString("E_NUMERO_INTERIOR"));
                String coloniaE = rs.getString("E_COLONIA");
                if (coloniaE.length() > 0) {
                    domicilioEmisor += ", " + coloniaE;
                }

                //uf.setLocalidad("Merida"); //ciudad. pendiente
                String municipioE = rs.getString("E_MUNICIPIO");
                if (municipioE.length() > 0) {
                    domicilioEmisor += ", " + municipioE;
                }

                String estadoE = rs.getString("E_ESTADO");
                if (estadoE.length() > 0) {
                    domicilioEmisor += ", " + estadoE;
                }

                String paisE = rs.getString("E_PAIS");
                if (paisE.length() > 0) {
                    domicilioEmisor += ", " + paisE;
                } else {
                    sAtribReq += "paisEmisor|";
                }

                String codigoPostalE = rs.getString("E_CODIGO_POSTAL");
                if (codigoPostalE.length() > 0) {
                    domicilioEmisor += ", CP " + codigoPostalE;
                }

                txtDomicilioEmisor.setText(domicilioEmisor);

                String regimenFiscalE = properties.getProperty("regimen");
                if (regimenFiscalE.length() > 0) {
                    txtRegimenFiscalEmisor.setText(regimenFiscalE);
                } else {
                    sAtribReq += "regimenFiscal|";
                }

                // Info receptor
                String nombreR = rs.getString("R_NOMBRE");
                if (nombreR.length() > 0) {
                    txtNombreReceptor.setText(nombreR);
                }

                String rfcR = rs.getString("R_RFC");
                if (rfcR.length() > 0) {
                    txtRfcReceptor.setText(rfcR);
                } else {
                    sAtribReq += "rfcReceptor|";
                }

                // Domicilio Receptor
                String domicilioReceptor = "";
                String calleR = rs.getString("R_CALLE");
                if (calleR.length() > 0) {
                    domicilioReceptor += calleR;
                } else {
                    sAtribReq += "calleReceptor|";
                }

                String noExteriorR = rs.getString("R_NUMERO_EXTERIOR");
                if (noExteriorR.length() > 0) {
                    domicilioReceptor += ", " + noExteriorR;
                }

                String coloniaR = rs.getString("R_COLONIA");
                if (coloniaR.length() > 0) {
                    domicilioReceptor += ", " + coloniaR;
                }

                //uf.setLocalidad(""); //pendiente
                String municipioR = rs.getString("R_MUNICIPIO");
                if (municipioR.length() > 0) {
                    domicilioReceptor += ", " + municipioR;
                }

                String estadoR = rs.getString("R_ESTADO");
                if (estadoR.length() > 0) {
                    domicilioReceptor += ", " + estadoR;
                }

                String paisR = rs.getString("R_PAIS");
                if (paisR.length() > 0) {
                    domicilioReceptor += ", " + paisR;
                } else {
                    sAtribReq += "paisReceptor|";
                }

                String codigoPostalR = rs.getString("R_CODIGO_POSTAL");
                if (codigoPostalR.length() > 0) {
                    domicilioReceptor += ", CP " + codigoPostalR;
                }

                txtDomicilioReceptor.setText(domicilioReceptor);

                String subTotal = rs.getString("SUBTOTAL");
                if (subTotal.length() > 0) {
                    txtSubtotal.setText(subTotal);
                } else {
                    sAtribReq += "subTotal|";
                }

                if (!rs.getString("I1_ID").equals("0")) {
                    txtImpuesto.setText(rs.getString("I1_IMPORTE"));
                }

                String total = rs.getString("TOTAL");
                if (total.length() > 0) {
                    txtTotal.setText(total);
                } else {
                    sAtribReq += "total|";
                }

                String tipoDeComprobante = rs.getString("TIPO_COMPROBANTE");
                if (tipoDeComprobante.length() == 0) {
                    sAtribReq += "tipoDeComprobante|";
                }

                String lugarExpedicion = rs.getString("LUGAR_EXPEDICION");
                if (lugarExpedicion.length() == 0) {
                    sAtribReq += "lugarExpedicion|";
                }

                if (sAtribReq.length() > 0) {
                    JOptionPane.showMessageDialog(rootPane, "Faltan valores para la construcción correcta de la factura. " + sAtribReq);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al cargar la información de la factura. " + ex);
        }
    }

    private void generarFactura() {
        try {
            //int orderId = Integer.parseInt(txtPedido.getText());
            //properties.load(getClass().getResourceAsStream("/net/tiglass/invoices/config.properties"));

            //--------------------------------
            CFDv32 cfd = new CFDv32(CFDv32Factory.createComprobante(orderId),
                    "net.tiglass.invoices");
            cfd.addNamespace("http://www.tiglass.net/invoice", "invoice");
            //cfd.addNamespace("http://www.bigdata.mx/cfdi/example", "example");

            PrivateKey key = KeyLoaderFactory.createInstance(
                    KeyLoaderEnumeration.PRIVATE_KEY_LOADER,
                    new FileInputStream(properties.getProperty("keyPath")),
                    properties.getProperty("keyPass")
            ).getKey();

            X509Certificate cert = KeyLoaderFactory.createInstance(
                    KeyLoaderEnumeration.PUBLIC_KEY_LOADER,
                    new FileInputStream(properties.getProperty("cerPath"))
            ).getKey();

            Comprobante sellado = cfd.sellarComprobante(key, cert);
            System.err.println(sellado.getSello());
            cfd.validar();
            cfd.verificar();
            //cfd.guardar(System.out);
            String rutaAnexos = properties.getProperty("rutaCFD");
            Calendar cal = Calendar.getInstance();
            String rutaDocto = "\\" + cal.get(Calendar.YEAR) + cal.get(Calendar.MONTH) + "\\";
            String nombreArchivo = "CFD_" + orderId + ".xml";
            String fullPathName = rutaAnexos + rutaDocto + nombreArchivo;

            File folder = new File(rutaAnexos + rutaDocto);
            folder.mkdirs();
            FileOutputStream fos = new FileOutputStream(fullPathName);
            cfd.guardar(fos);
            
            fos.flush();
            fos.close();

//            System.setProperty("javax.net.ssl.keyStore", "C:\\Trans\\Certificados\\PruebaIF\\VidriosMartePruebas.pfx");
//            System.setProperty("javax.net.ssl.keyStorePassword", "Interfactura1");
//            System.setProperty("javax.net.ssl.keyStoreType", "pkcs12");
//            System.setProperty("javax.net.ssl.trustStore", "C:\\Program Files\\Java\\jdk1.8.0_45\\jre\\lib\\security\\cacerts");
//            System.setProperty("javax.net.ssl.trustStorePassword", "changeit");
//            System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
            //System.setProperty("https.protocols", "SSLv3");
//            
//            TsunamiServiceStub cliente = null;
//            TsunamiServiceStub.GenerarCFDI request = null;
//            TsunamiServiceStub.GenerarCFDIResponse response = null;
            try {
//                cliente = new TsunamiServiceStub();
//                Options options = cliente._getServiceClient().getOptions();
//                options.setProperty(org.apache.axis2.transport.http.HTTPConstants.HTTP_PROTOCOL_VERSION, org.apache.axis2.transport.http.HTTPConstants.HEADER_PROTOCOL_V10);
//                request = new TsunamiServiceStub.GenerarCFDI();
//                request.setBatchCFDI(cfd.toString());
//                response = cliente.generarCFDI(request);

//                TsunamiService service = new TsunamiService();
//                GenerarCFDI port = service.getPort(GenerarCFDI.class);
//                GenerarCFDIResponse resp = port.
//                
                BufferedReader br = new BufferedReader(new FileReader(new File(rutaAnexos + rutaDocto + nombreArchivo)));
                String line;
                StringBuilder sb = new StringBuilder();

                while ((line = br.readLine()) != null) {
                    sb.append(line.trim());
                    //if (line.startsWith("<?xml"))
                    //    sb.append("<Comprobantes NumeroComprobantes=\"10\">");
                }

                //sb.append("</Comprobantes>");
                //tsf.abrirConexionHttps();
                String user = properties.getProperty("servCfdiUser");
                String pass = properties.getProperty("servCfdiPass");
                String targetEndpoint = properties.getProperty("servCfdiPath");
                String certPacPath = properties.getProperty("cerPath");

                ServiceClient wsClient = new ServiceClient();
                String result = wsClient.generarCFDICD(user, pass, sb.toString(), targetEndpoint, fullPathName, orderId, certPacPath);
                //String result = wsClient.generarCFDIAdv(sb.toString());
                //String result = wsClient.generarCFDI(sb.toString());

                if (result.equals("Ok")) {
                    if (storeAttachOnDB(orderId, rutaDocto + nombreArchivo)) {
                        JOptionPane.showMessageDialog(rootPane, "Documento generado y timbrado con exito!");

                        try {
                            Thread.sleep(1000);                 //1000 milliseconds is one second.
                            System.exit(0);
                        } catch (InterruptedException ex) {
                            Thread.currentThread().interrupt();
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Documento generado con exito, pero ocurrió un error al insertar la ruta del anexo.");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, result);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }
    
    private boolean storeAttachOnDB(int orderId, String fileName) {
        AlfakOrder order = new AlfakOrder();
        
        try {
            return order.storePathFileOnDB(orderId, fileName, "", "A");
        } catch (Exception e) {
            return false;
        }
    }

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        generarFactura();
        //String userHome = System.getProperty("user.home");
//        String appData = System.getenv("APPDATA") + "\\Invoices\\Properties";
//        JOptionPane.showMessageDialog(rootPane, appData);
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void txtRfcEmisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRfcEmisorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRfcEmisorActionPerformed

    private void txtRfcReceptorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRfcReceptorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRfcReceptorActionPerformed

    private void txtNombreEmisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreEmisorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreEmisorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGenerateInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGenerateInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGenerateInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGenerateInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmGenerateInvoice().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel pnlGeneral;
    private javax.swing.JTabbedPane tabGenerateInvoice;
    private javax.swing.JTextField txtDomicilioEmisor;
    private javax.swing.JTextField txtDomicilioReceptor;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFormaPago;
    private javax.swing.JTextField txtImpuesto;
    private javax.swing.JTextField txtMetodoPago;
    private javax.swing.JTextField txtNombreEmisor;
    private javax.swing.JTextField txtNombreReceptor;
    private javax.swing.JTextField txtPedido;
    private javax.swing.JTextField txtRegimenFiscalEmisor;
    private javax.swing.JTextField txtRfcEmisor;
    private javax.swing.JTextField txtRfcReceptor;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
